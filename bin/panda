#!/usr/bin/python
import logging
import os
import json

import argparse

import logging_utils
from panda import tempest_utils
from panda.cluster_utils import NSXV3_BACKEND
from panda.cluster_utils import NSXV_BACKEND
from panda.tempest_utils import DATA_NET_CIDR
from panda import shellutil as shell

LOG = logging.getLogger('panda')


def load_json_spec(path):
    with open(path, 'r') as fh:
        return json.load(fh)


def install_tempest(args):
    params = {}
    if args.repository:
        params['repository'] = args.repository
    if args.branch:
        params['branch'] = args.branch
    if args.conf_template:
        params['conf_template'] = args.conf_template
    if args.protocol:
        params['protocol'] = args.protocol
    tempest_utils.install_tempest(**params)


def config_tempest(args):
    conf_path = 'tempest/etc/tempest.conf'
    if os.path.exists(conf_path):
        return_code = shell.local('ping -c1 %s' % args.p_vip)[0]
        if return_code:
            LOG.error('%s is not reachable.', args.p_vip)
            return
        if args.neutron_backend in [NSXV_BACKEND, NSXV3_BACKEND] and \
                (not args.nsx_manager and args.nsx_user and args.nsx_pwd):
            LOG.error('NSX manager, user and password are required.')
            return
        tempest_utils.config_tempest(p_vip=args.p_vip,
                                     admin_user=args.admin_user,
                                     admin_pwd=args.admin_password,
                                     neutron_backend=args.neutron_backend,
                                     creds_provider=args.creds_provider,
                                     default_user=args.user1,
                                     default_pwd=args.user1_pwd,
                                     alter_user=args.user2,
                                     alter_pwd=args.user2_pwd,
                                     ext_net_cidr=args.ext_cidr,
                                     ext_net_start_ip=args.ext_start_ip,
                                     ext_net_end_ip=args.ext_end_ip,
                                     ext_net_gateway=args.ext_gateway,
                                     min_compute_nodes=args.compute_nodes,
                                     nsx_manager=args.nsx_manager,
                                     nsx_user=args.nsx_user,
                                     nsx_pwd=args.nsx_pwd,
                                     tenant_net_cidr=args.tenant_cidr,
                                     vlan_transparent=args.vlan_transparent)
        tempest_utils.generate_run_list(args.neutron_backend)
    else:
        LOG.error('%s not found. Please run "panda tempest install" first.',
                  conf_path)


def run_tempest(args):
    report_dir = args.report_dir if args.report_dir else os.getcwd()
    tests = args.tests.split(',')
    for test in tests:
        test = test.strip()
        test_list = 'tempest/%s.txt' % test
        if not os.path.exists(test_list):
            LOG.error('%s not Found. Please run "panda tempest config" first.'
                      % test_list)
            return
        tempest_utils.run_test(test, report_dir, args.smoke,
                               args.parallel, args.rerun)


def add_tempest_parser(sub_parsers):
    # cluster subcommands
    tempest_parser = sub_parsers.add_parser('tempest',
                                            help='Tempest test operations')
    tempest_sub_parsers = tempest_parser.add_subparsers(help='sub commands')
    # install tempest
    tempest_install_parser = tempest_sub_parsers.add_parser(
        'install', help='install tempest')
    tempest_install_parser.add_argument('--repository',
                                        help='git repository. '
                                             'github.com/openstack/tempest.git'
                                             ' if ignored.')
    tempest_install_parser.add_argument('--branch',
                                        help='branch name of repository. '
                                             '11.0.0 if ignored')
    tempest_install_parser.add_argument('--conf-template',
                                        dest='conf_template',
                                        help='tempest.conf template path.'
                                             'default template if ignored')
    tempest_install_parser.add_argument('--protocol',
                                        help='protocol of git clone. git, http'
                                             ' ssh or https.')
    tempest_install_parser.set_defaults(func=install_tempest)
    # configure tempest
    tempest_config_parser = tempest_sub_parsers.add_parser(
        'config', help='Create data for tempest and configure tempest.conf')
    tempest_config_parser.add_argument('p_vip',
                                       help='Public VIP.')
    tempest_config_parser.add_argument('admin_user',
                                       help='Admin user. admin for SQL backend'
                                            '. Bind user for LDAP backend.')
    tempest_config_parser.add_argument('admin_password',
                                       help='admin user password')
    tempest_config_parser.add_argument('neutron_backend',
                                       help='nsxv or dvs.')
    tempest_config_parser.add_argument('--credentials-provider',
                                       dest='creds_provider',
                                       action='store',
                                       default=tempest_utils.DYNAMIC_PROVIDER,
                                       help='Type dynamic for SQL backend. '
                                            'Type pre-provisioned if LDAP '
                                            'backend or DVS neutron backend.')
    tempest_config_parser.add_argument('--user1',
                                       action='store',
                                       default='default',
                                       help='User for test. Required and make '
                                            'sure it exists if LDAP backend.')
    tempest_config_parser.add_argument('--user1-password',
                                       dest='user1_pwd',
                                       action='store',
                                       default='vmware',
                                       help='Password of user1.')
    tempest_config_parser.add_argument('--user2',
                                       action='store',
                                       default='alt-user',
                                       help='User for test. Required and make '
                                            'sure it exists if LDAP backend.')
    tempest_config_parser.add_argument('--user2-password',
                                       dest='user2_pwd',
                                       action='store',
                                       default='vmware',
                                       help='Password of user2.')
    tempest_config_parser.add_argument('--ext-cidr',
                                       dest='ext_cidr',
                                       help='Edge external network CIDR')
    tempest_config_parser.add_argument('--ext-start-ip',
                                       dest='ext_start_ip',
                                       help='Edge external network start IP.')
    tempest_config_parser.add_argument('--ext-end-ip',
                                       dest='ext_end_ip',
                                       help='Edge external network end IP.')
    tempest_config_parser.add_argument('--ext-gateway',
                                       dest='ext_gateway',
                                       help='Edge external network gateway IP')
    tempest_config_parser.add_argument('--compute-nodes',
                                       dest='compute_nodes',
                                       action='store',
                                       default=1,
                                       help='Number of compute nodes.')
    tempest_config_parser.add_argument('--nsx-manager',
                                       dest='nsx_manager',
                                       help='IP or hostname of NSX manager.')
    tempest_config_parser.add_argument('--nsx-user',
                                       dest='nsx_user',
                                       help='Admin user name of NSX manager.')
    tempest_config_parser.add_argument('--nsx-password',
                                       dest='nsx_pwd',
                                       help='Admin user password of NSX '
                                            'manager.')
    tempest_config_parser.add_argument('--tenant-cidr',
                                       dest='tenant_cidr',
                                       default=DATA_NET_CIDR,
                                       help='Tenant network CIDR. Required in '
                                            'DVS backend.')
    tempest_config_parser.add_argument('--vlan-transparent',
                                       dest='vlan_transparent',
                                       action='store_true',
                                       default=False,
                                       help='Enalbe vlan transparent on the '
                                            'data network.')
    tempest_config_parser.set_defaults(func=config_tempest)
    # run tempest
    tempest_config_parser = tempest_sub_parsers.add_parser(
        'run', help='Run tempest tests.')
    tempest_config_parser.add_argument('tests',
                                       help='Test suite name, separated with '
                                            'comma. Example: nova,cinder,'
                                            'neutron,heat,keystone,glance,'
                                            'scenario')
    tempest_config_parser.add_argument('--report-dir',
                                       dest='report_dir',
                                       help='Dir to generate reports. Current '
                                            'dir by default.')
    tempest_config_parser.add_argument('--smoke',
                                       action="store_true",
                                       default=False,
                                       help='Run smoke type tests.')
    tempest_config_parser.add_argument('--parallel',
                                       action="store_true",
                                       default=False,
                                       help='Run tests in parallel.')
    tempest_config_parser.add_argument('--rerun-failures',
                                       dest='rerun',
                                       action="store_true",
                                       default=False,
                                       help='Rerun failed tests afterward.')
    tempest_config_parser.set_defaults(func=run_tempest)


def main():
    logging_utils.setup_logging()
    panda_parser = argparse.ArgumentParser(
        prog='panda',
        description='Cli for deploying and testing VIO')
    sub_parsers = panda_parser.add_subparsers(help='commands')
    add_tempest_parser(sub_parsers)
    args = panda_parser.parse_args()
    LOG.debug('Arguments: %s' % args)
    args.func(args)


if __name__ == '__main__':
    main()

